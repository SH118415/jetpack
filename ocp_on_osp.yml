---
- hosts: undercloud
  become: yes
  become_user: stack
  tasks:
    - name: set ocp vars
      include_vars:
        dir: vars
        files_matching: shift_stack_vars.yaml

    - name: add MASQUERADE rule
      iptables:
        table: nat
        chain: POSTROUTING
        out_interface: '{{ ansible_default_ipv4.interface }}'
        jump: MASQUERADE
      become_user: root
      become: yes

    - name: create flavor
      os_nova_flavor:
        cloud: "overcloud"
        state: present
        name: "m4.xlarge"
        ram: 16384
        vcpus: 4
        disk: 40

    - name: create new user and project
      include_tasks: tasks/create_project_and_user.yml

    - name: get shiftstack teneant id
      shell: source /home/stack/overcloudrc && openstack project show shiftstack -f value -c id
      register: shiftstack_id
      args:
        chdir: /home/stack

    - name: set quotas to unlimited
      os_quota:
        cloud: "overcloud"
        name: "{{ shiftstack_id.stdout }}"
        server_groups: -1
        properties: -1
        ram: -1
        key_pairs: -1
        instances: -1
        cores: -1
        per_volume_gigabytes: -1
        gigabytes: -1
        backup_gigabytes: -1
        snapshots: -1
        volumes: -1
        backups: -1
        subnetpool: -1
        port: -1
        subnet: -1
        network: -1
        floating_ips: -1
        floatingip: -1
        security_group_rule: -1
        security_group: -1
        router: -1
        rbac_policy: -1

    - name: create shiftstackrc
      shell: |
        sed -e 's/OS_USERNAME=.*/OS_USERNAME=shiftstack_user/' \
        -e 's/OS_PROJECT_NAME=.*/OS_PROJECT_NAME=shiftstack/' \
        -e 's/OS_CLOUDNAME=.*/OS_CLOUDNAME=shiftstack/' \
        -e 's/OS_PASSWORD=.*/OS_PASSWORD=redhat/' overcloudrc > shiftstackrc

    - name: get cloud.yaml variables
      shell: |
        for key in $( set | awk '{FS="="}  /^OS_/ {print $1}' ); do unset $key ; done
        source /home/stack/shiftstackrc
        echo -n " shiftstack: \
          {'auth': \
            { 'auth_url': '$OS_AUTH_URL', \
              'username': '$OS_USERNAME', \
              'password': '$OS_PASSWORD', \
              $(if [ -n "$OS_USER_DOMAIN_NAME" ]; then echo "'user_domain_name': '${OS_USER_DOMAIN_NAME}',"; fi) \
              $(if [ -n "$OS_PROJECT_DOMAIN_NAME" ]; then echo "'project_domain_name': '${OS_PROJECT_DOMAIN_NAME}',"; fi) \
              'project_name': '${OS_PROJECT_NAME:-$OS_TENANT_NAME}' \
            } $(if [ -n "$OS_IDENTITY_API_VERSION" ]; then echo ",'identity_api_version': '${OS_IDENTITY_API_VERSION}'"; fi) }"
      register: cloud_details

    - name: Set clouds_yaml fact
      set_fact:
        clouds_yaml: "{{ cloud_details.stdout|from_yaml }}"

    - name: insert cloud parameters
      blockinfile:
        dest: "/home/stack/clouds.yaml"
        block: |5
              {{ clouds_yaml|to_nice_yaml(indent=4) }}
        insertbefore: "#END shiftstack SECTION"
        marker: "#{mark} shiftstack PARAMETERS"

    - name: read ssh key file
      slurp:
        src: "{{ ssh_key_file }}"
      register: ssh_key_content

    - name: set pull secret
      set_fact:
        ocp_pull_secret: "{{ pull_secret| to_yaml }}"
      when: pull_secret is defined

    - name: set pull secret from env
      set_fact:
        ocp_pull_secret: "{{ lookup('env', 'OPENSHIFT_INSTALL_PULL_SECRET')| to_yaml }}"
      when: pull_secret is not defined

    - name: set key value fact
      set_fact:
        ssh_public_key: "{{ ssh_key_content['content'] | b64decode }}"

    - name: create floating ip
      shell: |
        source /home/stack/overcloudrc
        openstack floating ip create --project {{ shiftstack_id.stdout }} {{ public_net_name }} -f value -c floating_ip_address
      register: floating_ip_addr

    - name: set floating_ip fact
      set_fact:
        api_floating_ip: "{{ floating_ip_addr.stdout }}"

    - name: add DNS detail in etc/hosts
      blockinfile:
        path: "/etc/hosts"
        block: |
            {{ api_floating_ip }} api.ostest.shiftstack.com
            {{ api_floating_ip }} console-openshift-console.apps.ostest.shiftstack.com
            {{ api_floating_ip }} openshift-authentication-openshift-authentication.apps.ostest.shiftstack.com
        insertafter: "EOF"
      become: yes
      become_user: root

    - name: create install dir
      file:
        path: /home/stack/ostest
        state: directory

    - name: prepare install-config
      template:
        src: "{{ playbook_dir }}/templates/install-config.yaml.j2"
        dest: "/home/stack/install-config.yaml"

    - name: copy the install-config to metadata dir
      copy:
        src: "/home/stack/install-config.yaml"
        dest: "/home/stack/ostest/"
        remote_src: yes

    - name: get the latest installer
      get_url:
        validate_certs: no
        url: https://mirror.openshift.com/pub/openshift-v4/x86_64/clients/ocp/{{ ocp_release }}/openshift-install-linux.tar.gz
        dest: /home/stack/openshift-install-linux.tar.gz

    - name: untar installer
      unarchive:
        src: /home/stack/openshift-install-linux.tar.gz
        dest: /home/stack/
        remote_src: yes

    - name: run installer
      shell: |
        ./openshift-install --log-level=debug create cluster --dir=ostest > ocp_install.log 2>&1
      args:
        chdir: /home/stack/
    - name: install ocp client
      block:
        - name: get the ocp client
          get_url:
            validate_certs: no
            url: https://mirror.openshift.com/pub/openshift-v4/x86_64/clients/ocp/{{ ocp_release }}/openshift-client-linux.tar.gz
            dest: /home/stack/openshift-client-linux.tar.gz

        - name: untar ocp client
          unarchive:
            src: /home/stack/openshift-client-linux.tar.gz
            dest: /usr/local/bin/
            remote_src: yes
          become: true
      when: install_client == true
