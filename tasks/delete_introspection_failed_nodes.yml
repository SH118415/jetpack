---
- name: Get output of bulk introspection status and store as yaml
  shell: |
       source ~/stackrc
       {% if osp_release < 13 %}
       openstack baremetal introspection bulk status -f yaml
       {% else %}
       openstack baremetal introspection list -f yaml
       {% endif %}
  register: bulk_status
  tags:
      - skip_ansible_lint

# Extract introspected nodes to yaml
- set_fact:
      introspected_nodes: '{{ bulk_status.stdout | from_yaml }}'

# Construct list of UUID's of nodes failing introspection
- set_fact:
      failed_nodes_uuids: "{{ (failed_nodes_uuids | default([]) ) + [ item[uuid_field_name] ] }}"
  with_items: "{{ introspected_nodes | default([]) }}"
  vars:
      - osp_version: "{{ osp_release }}"
      - uuid_field_name: "{{ ( osp_version|int < 13) | ternary('Node UUID', 'UUID') }}"
      - finished_condition:  "{{ item.get('Error') | ternary( True, (osp_version|int < 13) | ternary(item.get('Finished') == false, item.get('Finished at') is none )) }}"
  when:
      - finished_condition

- name: delete failed nodes
  shell: |
      source ~/stackrc
      openstack baremetal node delete {{ item }}
  with_items: "{{ failed_nodes_uuids }}"
  ignore_errors: true

- name: get all nodes
  shell: |
      source ~/stackrc
      openstack baremetal node list -f value -c UUID
  register: total_nodes

- name: set provision state of all nodes to available
  shell: |
      source ~/stackrc;
      export PROV_STATE=$(ironic node-show {{ item }} | grep ' provision_state ');
      if [[ $PROV_STATE != *"available"* ]]; then
          ironic node-set-provision-state {{ item }} provide;
      fi
  with_items: "{{ total_nodes.stdout_lines | default([]) }}"
  tags:
      - skip_ansible_lint

